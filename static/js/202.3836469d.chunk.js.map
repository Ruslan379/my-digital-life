{"version":3,"file":"static/js/202.3836469d.chunk.js","mappings":"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","sources":["webpack://my-digital-life/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","components/Loader/Loader.jsx","redux/transaction/transactionSelectors.js","webpack://my-digital-life/./src/components/ModalNullBalance/ModalNullBalance.module.css?9e78","components/ModalNullBalance/ModalNullBalance.jsx","webpack://my-digital-life/./src/components/ModalNullBalanceWindow/ModalNullBalanceWindow.module.css?5a07","components/ModalNullBalanceWindow/ModalNullBalanceWindow.js","webpack://my-digital-life/./src/components/BalanceForm/BalanceForm.module.css?dae1","components/BalanceForm/BalanceForm.js","webpack://my-digital-life/./src/components/TransactionForm/TransactionForm.module.css?2486","components/TransactionForm/TransactionForm.js","webpack://my-digital-life/./src/components/TransactionListItem/TransactionListItem.module.css?61d9","components/TransactionListItem/TransactionListItem.js","webpack://my-digital-life/./src/components/TransactionList/TransactionList.module.css?a859","components/TransactionList/TransactionList.js","pages/ExpensesPage/ExpensesPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"Container_Container__dPyVg\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport css from 'components/Container/Container.module.css' \n\n\nexport const Container = ({ children }) =>\n    <div className={css.Container}>\n        {children}\n    </div>;\n\n\nContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\n\n","import React from 'react';\n\nimport { Audio } from  'react-loader-spinner'\n\n\n\nexport const Loader = () => (\n  <h1 style={{ margin: '0 auto' }}>\n    Please wait...\n      <Audio width = \"100%\" />\n  </h1>\n);\n\n\n\n// export default Loader;\n","// export const selectLoading = state => state.contacts.loading; //! Ошибка Репеты\nexport const selectLoadingTransactions = state => state.transactions.isLoading;\n\n\nexport const selectAllTransactions = state => state.transactions.allTransactions;\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"ModalNullBalance_Overlay__MY3ZA\",\"Modal\":\"ModalNullBalance_Modal__Ow1Wp\"};","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport css from 'components/ModalNullBalance/ModalNullBalance.module.css' \n\n\n\n\nconst modalRoot = document.querySelector('#modal-root');\n\n\nexport function ModalNullBalance({ children, onClose }) {\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        onClose();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]); \n\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n\n\n    return createPortal(\n      <div\n        className={css.Overlay1}\n        onClick={handleBackdropClick}\n      >\n          <div className={css.Modal}>\n          {children}\n          </div>\n      </div>,\n      modalRoot,\n    );\n  }\n\n\nModalNullBalance.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"FormEdit\":\"ModalNullBalanceWindow_FormEdit__kofm7\",\"FormLabelEdit\":\"ModalNullBalanceWindow_FormLabelEdit__DzT6a\",\"FormBtnEdit\":\"ModalNullBalanceWindow_FormBtnEdit__V+FuQ\",\"FormInputEdit\":\"ModalNullBalanceWindow_FormInputEdit__5qJ-M\"};","\nimport css from './ModalNullBalanceWindow.module.css';\n\n\n// export const ModalNullBalanceWindow = ({ toggleModal }) => {\nexport const ModalNullBalanceWindow = () => {\n\n    return (\n        <div className={css.FormEdit}>\n            Hello! To get started, enter the current balance of your account!\n        </div>\n    );\n}\n\n// ModalNullBalanceWindow.propTypes = {\n//     toggleModal: PropTypes.func.isRequired,\n// };\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"BalanceForm_Form__sTjkN\",\"FormLabel\":\"BalanceForm_FormLabel__D+IkA\",\"FormBtn\":\"BalanceForm_FormBtn__7m8A3\",\"FormInput\":\"BalanceForm_FormInput__bqPQk\",\"btnConfirmActive\":\"BalanceForm_btnConfirmActive__b9hJv\",\"btnConfirmDisabled\":\"BalanceForm_btnConfirmDisabled__+QPff\"};","// import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\n// import { getBalance, updateBalance } from 'redux/auth/authOperations.js';\nimport { updateBalance } from 'redux/auth/authOperations.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { selectIsRefreshing, selectBalance } from 'redux/auth/authSelectors';\n// import { selectIsRefreshing } from 'redux/auth/authSelectors';\nimport { useAuth } from 'hooks';\n\n// import { Spinner } from 'components/Spinner/Spinner';\n\n//! Модальное окно\nimport { ModalNullBalance } from 'components/ModalNullBalance/ModalNullBalance.jsx';\n// import { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { ModalNullBalanceWindow } from 'components/ModalNullBalanceWindow/ModalNullBalanceWindow.js';\n\nimport css from './BalanceForm.module.css';\n\n\n\nexport const BalanceForm = () => {\n    const dispatch = useDispatch();\n\n    //! Модальное окно\n    const [showModal, setShowModal] = useState(false);\n    const toggleModal = () => {\n        setShowModal(!showModal);\n    };\n    console.log(\"BalanceForm ==> showModal:\", showModal); //!\n\n    // useEffect(() => {\n    //     dispatch(getBalance());\n    // }, [dispatch]);\n\n    const { isRefreshing: isRefreshingAuth, user, balance: balanceAuth } = useAuth();\n    const balanceUser = user.balance; //! тормозит\n    console.log(\"BalanceForm ==> balanceUser:\", balanceUser); //!\n    console.log(\"BalanceForm ==> balanceAuth:\", balanceAuth); //!\n    console.log(\"BalanceForm ==> isRefreshingAuth:\", isRefreshingAuth); //!\n\n    const balance1 = useSelector(selectBalance);\n    console.log(\"BalanceForm ==> balance1:\", balance1); //!\n    console.log(\"BalanceForm ==> typeof balance1:\", (typeof Number(balance1))); //!\n\n\n    const isRefreshing = useSelector(selectIsRefreshing);\n    console.log(\"BalanceForm ==> isRefreshing:\", isRefreshing); //!\n\n\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const form = e.currentTarget;\n        const balance = form.elements.balance.value;\n\n        dispatch(updateBalance({ balance }));\n        toast.success(`Your balance has been successfully updated to ${balance} UAN`);\n        // dispatch(getBalance());\n        form.reset();\n        return;\n    };\n\n\n\n    return (\n        <>\n            <form\n                className={css.Form}\n                onSubmit={handleSubmit}\n            >\n                <label\n                    className={css.FormLabel}\n                >\n                    Balance:&nbsp;&nbsp;&nbsp;\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        type=\"text\"\n                        name=\"balance\"\n                        pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                        title=\"Вalance must be whole numbers (or decimal numbers)\"\n                        // disabled={balance1} //! пока не блокировать\n                        // required\n                        // value={balance1}\n                        // readonly\n                        defaultValue={balance1}\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n\n\n                <button\n                    className={css.FormBtn}\n                    type=\"submit\"\n                // disabled={balance1} //! пока не блокировать\n                >\n                    {/* CONFIRM */}\n                    {\n                        balance1\n                            ?\n                            <span className={css.btnConfirmDisabled}>\n                                CONFIRM\n                            </span>\n                            :\n                            <span className={css.btnConfirmActive}>\n                                CONFIRM\n                            </span>\n                    }\n                    {/* {isRefreshing ? <Spinner size=\"32\">CONFIRM</Spinner> : \"CONFIRM\"} */}\n                </button>\n\n            </form>\n\n            {/* //! Модальное окно */}\n            {!balance1 && (\n                <ModalNullBalance onClose={toggleModal}>\n                    <ModalNullBalanceWindow />\n                </ModalNullBalance>\n            )}\n\n            <ToastContainer autoClose={1500} theme={\"colored\"} />\n        </>\n    );\n}\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"TransactionForm_Form__HDr-h\",\"FormLabel\":\"TransactionForm_FormLabel__33C-l\",\"FormBtn\":\"TransactionForm_FormBtn__kZSQ7\",\"FormInput\":\"TransactionForm_FormInput__IXxud\",\"selectText\":\"TransactionForm_selectText__NeAXk\",\"selectPlaceholder\":\"TransactionForm_selectPlaceholder__ilaY3\"};","// import { useEffect } from 'react';\n// import { useSelector } from 'react-redux';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import { Spinner } from 'components/Spinner/Spinner';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport moment from 'moment';\n\n\n// import { updateBalance } from 'redux/auth/authOperations.js'; //!!!!!\nimport { addTransactionExpenses } from 'redux/transaction/transactionOperations.js'; //!!!!!\n\nimport { selectIsRefreshing, selectBalance } from 'redux/auth/authSelectors';\n// import { selectIsRefreshing } from 'redux/auth/authSelectors';\nimport { useAuth } from 'hooks';\n\n\nimport css from './TransactionForm.module.css';\n\n\n//---------------------------------------------------------------------------------\nexport const TransactionForm = ({ transactionsType }) => {\n    const dispatch = useDispatch();\n\n    //!!!!!\n    // useEffect(() => {\n    //     dispatch(getBalance());\n    // }, [dispatch]);\n\n    //! ========================== console balance & isRefreshing ==========================\n    const { isRefreshing: isRefreshingAuth, user, balance: balanceAuth } = useAuth();\n    const balanceUser = user.balance; //! тормозит\n    console.log(\"TransactionForm ==> balanceUser:\", balanceUser); //!\n    console.log(\"TransactionForm ==> balanceAuth:\", balanceAuth); //!\n    console.log(\"TransactionForm ==> isRefreshingAuth:\", isRefreshingAuth); //!\n\n    const balance1 = useSelector(selectBalance);\n    console.log(\"TransactionForm ==> balance1:\", balance1); //!\n\n    const isRefreshing = useSelector(selectIsRefreshing);\n    console.log(\"TransactionForm ==> isRefreshing:\", isRefreshing); //!\n    //! _________________________ console balance & isRefreshing _________________________\n\n\n    //! currentDate\n    // const currentDate = moment().format(\"DD-MM-YYYY_hh:mm:ss\");\n    const currentDate = moment().format(\"DD-MM-YYYY\");\n    console.log(\"currentDate:\", currentDate);\n\n    //! Submit FORM\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const form = e.currentTarget;\n        // const currentDate = form.elements.currentDate.value;\n        const description = form.elements.description.value;\n        const category = form.elements.category.value;\n        const sum = form.elements.sum.value;\n\n        if (category === \"true\") {\n            toast.warning(`Please choose a product category`);\n            return;\n        }\n        if (!sum) {\n            toast.warning(`Please enter the transaction amount`);\n            return;\n        }\n\n        const expensesTransaction = {\n            transactionsType,\n            date: currentDate,\n            description,\n            category,\n            sum\n        };\n\n        console.log(\"Expenses Transaction:\", expensesTransaction); //!\n\n        dispatch(addTransactionExpenses(expensesTransaction));\n        toast.success(`Your Expenses transaction has been successfully added`);\n        form.reset();\n        return;\n    };\n\n\n\n    return (\n        <>\n            <form\n                className={css.Form}\n                id=\"transactionForm\"\n                onSubmit={handleSubmit}\n            >\n                {/* //! DATE */}\n                <label className={css.FormLabel}>\n                    {/* DATE */}\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    {/* <br /> */}\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        type=\"text\"\n                        name=\"currentDate\"\n                        defaultValue={currentDate}\n                    // placeholder=\"Date\"\n                    // pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                    // title=\"Вalance must be whole numbers (or decimal numbers)\"\n                    // required\n                    // value={balance1}\n                    // readonly\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n                {/* <br /> */}\n\n                {/* //! DESCRIPTION */}\n                <label className={css.FormLabel}>\n                    {/* DESCRIPTION */}\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        type=\"text\"\n                        name=\"description\"\n                        placeholder=\"Product description\"\n                    // pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                    // title=\"Вalance must be whole numbers (or decimal numbers)\"\n                    // required\n                    // readonly\n                    // value={balance1}\n                    // defaultValue={\"Product description\"}\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n\n                {/* //! CATEGORY */}\n                <label className={css.FormLabel}\n                // for=\"productCategory\"\n                >\n                    {/* Choose a Product category: */}\n                </label>\n                {/* <p className={css.selectText}> */}\n                <select className={css.selectText}\n                    id=\"productCategory\"\n                    // value={\"Product category\"}\n                    // defaultValue={\"Product category\"}\n                    name=\"category\"\n                    // placeholder=\"Product category\"\n                    form=\"transactionForm\"\n                // required\n                >\n                    {/* <option value=\"Product category\" disabled>******</option> */}\n                    {/* <option className={css.selectPlaceholder} disabled>Product category</option> */}\n                    <option className={css.selectPlaceholder} value disabled selected>Product category</option>\n                    <option value=\"transport\">Transport</option>\n                    <option value=\"products\">Products</option>\n                    <option value=\"health\">Health</option>\n                    <option value=\"alcohol\">Alcohol</option>\n                    <option value=\"entertainment\">Entertainment</option>\n                    <option value=\"housing\">Housing</option>\n                    <option value=\"technique\">Technique</option>\n                    <option value=\"communal\">Communal, communication</option>\n                    <option value=\"sports\">Sports, hobbies</option>\n                    <option value=\"education\">Education</option>\n                    <option value=\"other\">Other</option>\n                </select>\n                {/* </p> */}\n\n                {/* //! SUM */}\n                <label className={css.FormLabel}>\n                    {/* SUM */}\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    {/* <br /> */}\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        // type=\"text\"\n                        type=\"text\"\n                        name=\"sum\"\n                        placeholder=\"0,00\"\n                        pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                        title=\"Вalance must be whole numbers (or decimal numbers)\"\n                    // focus\n                    // style={{ color: \"red\" }}\n                    // required\n                    // readonly\n                    // value={balance1}\n                    // defaultValue={\"0,00\"}\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n\n                {/* //! Кнопка submit FORM */}\n                <button className={css.FormBtn}\n                    type=\"submit\"\n                // disabled={isRefreshing}\n                >\n                    INPUT\n                    {/* {isRefreshing ? <Spinner size=\"32\">CONFIRM</Spinner> : \"CONFIRM\"} */}\n                </button>\n\n                {/* //! Кнопка очистки FORM */}\n                <input className={css.FormBtn}\n                    type=\"reset\"\n                    value=\"CLEAR\"\n                    form=\"transactionForm\"\n                // onChange={handleClearSubmit}\n                />\n            </form>\n\n            <ToastContainer autoClose={1500} theme={\"colored\"} />\n        </>\n    );\n}\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"TransactionListItem\":\"TransactionListItem_TransactionListItem__7P-i+\",\"TransactionListItemText\":\"TransactionListItem_TransactionListItemText__pk84L\",\"TransactionListItemTextSum\":\"TransactionListItem_TransactionListItemTextSum__FV2O0\",\"ContactListNumber\":\"TransactionListItem_ContactListNumber__N4lzJ\",\"ContactListEditBtn\":\"TransactionListItem_ContactListEditBtn__GAH78\",\"ContactListDeleteBtn\":\"TransactionListItem_ContactListDeleteBtn__6pp5k\"};","// import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n// import { fetchContacts } from 'redux/contacts/contactsOperations'; //??\nimport { deleteTransaction } from 'redux/transaction/transactionOperations.js';\nimport { selectLoadingTransactions } from 'redux/transaction/transactionSelectors.js';\n// import { ContactEditor } from 'components/ContactEditor/ContactEditor';\n// import { Spinner } from 'components/Spinner/Spinner';\n// import { Modal } from 'components/Modal/Modal';\n\nimport css from './TransactionListItem.module.css';\n\n\n\n// export const ContactListItem = ({ id, name, number }) => { //??\nexport const TransactionListItem = ({ id, date, description, category, sum }) => {\n    // const [showModal, setShowModal] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const isLoading = useSelector(selectLoadingTransactions);\n    console.log(\"ContactListItem==>isLoading:\", isLoading); //!\n\n\n    // const handleDelete = () => dispatch(deleteContact(id)); //??\n\n    const handleDelete = () => {\n        dispatch(deleteTransaction(id));\n        // dispatch(fetchContacts()); //??\n    };\n\n\n    // const toggleModal = () => {\n    //     setShowModal(!showModal);\n    // };\n\n    // const handleEdit = () => {\n    //     toggleModal()\n    //     //! +++++++++++++++++++++++++++++++++++\n    //     // const newName = \"RoseEDIT\"\n    //     // const newNumber = \"000-00-00\"\n    //     // console.log(\"id:\", id);\n    //     // console.log(\"newName:\", newName);\n    //     // console.log(\"newNumber:\", newNumber);\n\n    //     // ContactForm(newName, newNumber)\n\n    //     // dispatch(editContact({ id, newName, newNumber }))\n    //     //! +++++++++++++++++++++++++++++++++++\n    // };\n\n\n\n\n    return (\n        <>\n            <li className={css.TransactionListItem}>\n                <p className={css.TransactionListItemText}>\n                    {date}\n                </p>\n                <p className={css.TransactionListItemText}>\n                    {description}\n                </p>\n                <p className={css.TransactionListItemText}>\n                    {category}\n                </p>\n                <p className={css.TransactionListItemTextSum}>\n                    {-sum}\n                </p>\n\n\n                {/* <button\n                    type=\"button\"\n                    className={css.ContactListEditBtn}\n                    onClick={handleEdit}\n                    disabled={isLoading}\n                >\n                    Edit\n                    {isLoading ? [<Spinner size=\"18\" />, \" Editing...\"] : \"Edit\"}\n                </button> */}\n\n                <button\n                    type=\"button\"\n                    className={css.ContactListDeleteBtn}\n                    onClick={handleDelete}\n                    // onClick={() => deleteContact(id)}\n                    disabled={isLoading}\n                >\n                    Delete\n                    {/* {isLoading ? [<Spinner size=\"18\" />, \" Deleting...\"] : \"Delete\"} */}\n                </button>\n\n                {/* {showModal && (\n                    <Modal onClose={toggleModal}>\n                        <ContactEditor\n                            id={id}\n                            name={name}\n                            // number={number}\n                            phone={phone}\n                            toggleModal={toggleModal}\n\n                        />\n                    </Modal>\n                )} */}\n            </li>\n        </>\n    );\n};\n\nTransactionListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactList\":\"TransactionList_ContactList__6JVJP\",\"TransactionListHeader\":\"TransactionList_TransactionListHeader__lXBuk\",\"TransactionListText\":\"TransactionList_TransactionListText__PdA0x\"};","// import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { TransactionListItem } from '../TransactionListItem/TransactionListItem.js';\n\n\nimport css from './TransactionList.module.css';\n\n\n\nexport const TransactionList = ({ transactions }) => {\n    return (\n        <>\n            <div className={css.TransactionListHeader}>\n                <p className={css.TransactionListText}>\n                    Date\n                </p>\n                <p className={css.TransactionListText}>\n                    Description\n                </p>\n                <p className={css.TransactionListText}>\n                    Category\n                </p>\n                <p className={css.TransactionListText}>\n                    Sum\n                </p>\n                <p className={css.TransactionListText}>\n\n                </p>\n            </div>\n\n            <ul className={css.ContactList}>\n                {transactions.map(({ _id, date, description, category, sum }) => (\n                    <TransactionListItem\n                        key={_id}\n                        id={_id}\n                        date={date}\n                        description={description}\n                        category={category}\n                        sum={sum}\n                    />\n                ))}\n            </ul>\n        </>\n    );\n};\n\n\nTransactionList.propTypes = {\n    transactions: PropTypes.array.isRequired,\n};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Container } from 'components/Container/Container';\n\nimport { Loader } from 'components/Loader/Loader';\n\nimport { getBalance } from 'redux/auth/authOperations';\nimport { selectIsRefreshing, selectBalance } from 'redux/auth/authSelectors';\n// import { useAuth } from 'hooks';\nimport { getAllTransactions } from 'redux/transaction/transactionOperations.js';\nimport { selectLoadingTransactions, selectAllTransactions } from 'redux/transaction/transactionSelectors.js';\n\nimport { BalanceForm } from 'components/BalanceForm/BalanceForm.js';\nimport { TransactionForm } from 'components/TransactionForm/TransactionForm.js';\nimport { TransactionList } from 'components/TransactionList/TransactionList.js';\n\n\n//-----------------------------------------------------------------------------------\nexport default function ExpensesPage() {\n  const dispatch = useDispatch();\n\n  //! Тип траззакции \"expenses\"\n  const transactionsType = \"expenses\"\n\n  useEffect(() => {\n    dispatch(getAllTransactions());\n    dispatch(getBalance());\n  }, [dispatch]);\n\n\n  const balance = useSelector(selectBalance);\n  console.log(\"ExpensesPage ==> balance:\", balance); //!\n\n  const isRefreshing = useSelector(selectIsRefreshing);\n  console.log(\"ExpensesPage ==> isRefreshing:\", isRefreshing); //!\n\n  const isLoading = useSelector(selectLoadingTransactions);\n  console.log(\"ExpensesPage ==> isLoading:\", isLoading); //!\n\n  const transactions = useSelector(selectAllTransactions);\n  console.log(\"ExpensesPage ==> transactions:\", transactions); //!\n\n\n  return (\n    <Container>\n      <h2>Balance: {balance}</h2>\n      <BalanceForm />\n      <br />\n      <br />\n\n      <h2>Expenses transactions</h2>\n      <TransactionForm transactionsType={transactionsType} />\n\n\n      {isLoading && <Loader />}\n\n      {transactions.length > 0 && (\n        <>\n          <h2>Expenses transactions list</h2>\n          <TransactionList\n            transactions={transactions}\n          // visibleTransaction={visibleTransaction}\n          />\n\n          {/* <Filter /> */}\n        </>\n      )}\n\n      {/* {contacts.length > 0 && !isLoading && <DeleteAllContacts />} */}\n\n    </Container>\n  );\n}\n"],"names":["Container","children","className","css","Loader","style","margin","width","selectLoadingTransactions","state","transactions","isLoading","selectAllTransactions","allTransactions","modalRoot","document","querySelector","ModalNullBalance","onClose","useEffect","handleKeyDown","event","code","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","ModalNullBalanceWindow","BalanceForm","dispatch","useDispatch","useState","showModal","setShowModal","console","log","useAuth","isRefreshingAuth","isRefreshing","user","balanceAuth","balance","balanceUser","balance1","useSelector","selectBalance","Number","selectIsRefreshing","onSubmit","e","preventDefault","form","elements","value","updateBalance","toast","reset","type","name","pattern","title","defaultValue","autoClose","theme","TransactionForm","transactionsType","currentDate","moment","format","id","description","category","sum","expensesTransaction","date","addTransactionExpenses","placeholder","disabled","selected","TransactionListItem","deleteTransaction","TransactionList","map","_id","ExpensesPage","getAllTransactions","getBalance","length"],"sourceRoot":""}