{"version":3,"file":"static/js/88.2c5ab4af.chunk.js","mappings":"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","sources":["webpack://my-digital-life/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","webpack://my-digital-life/./src/components/BalanceForm/BalanceForm.module.css?dae1","components/BalanceForm/BalanceForm.js","webpack://my-digital-life/./src/components/TransactionForm/TransactionForm.module.css?2486","components/TransactionForm/TransactionForm.js","pages/ExpensesPage/ExpensesPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"Container_Container__dPyVg\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport css from 'components/Container/Container.module.css' \n\n\nexport const Container = ({ children }) =>\n    <div className={css.Container}>\n        {children}\n    </div>;\n\n\nContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"BalanceForm_Form__sTjkN\",\"FormLabel\":\"BalanceForm_FormLabel__D+IkA\",\"FormBtn\":\"BalanceForm_FormBtn__7m8A3\",\"FormInput\":\"BalanceForm_FormInput__bqPQk\"};","// import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\n// import { getBalance, updateBalance } from 'redux/auth/authOperations.js';\nimport { updateBalance } from 'redux/auth/authOperations.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { selectIsRefreshing, selectBalance } from 'redux/auth/authSelectors';\n// import { selectIsRefreshing } from 'redux/auth/authSelectors';\nimport { useAuth } from 'hooks';\n\n// import { Spinner } from 'components/Spinner/Spinner';\n\nimport css from './BalanceForm.module.css';\n\n\n\nexport const BalanceForm = () => {\n    const dispatch = useDispatch();\n\n    // useEffect(() => {\n    //     dispatch(getBalance());\n    // }, [dispatch]);\n\n    const { isRefreshing: isRefreshingAuth, user, balance: balanceAuth } = useAuth();\n    const balanceUser = user.balance; //! тормозит\n    console.log(\"BalanceForm ==> balanceUser:\", balanceUser); //!\n    console.log(\"BalanceForm ==> balanceAuth:\", balanceAuth); //!\n    console.log(\"BalanceForm ==> isRefreshingAuth:\", isRefreshingAuth); //!\n\n    const balance1 = useSelector(selectBalance);\n    console.log(\"BalanceForm ==> balance1:\", balance1); //!\n\n    const isRefreshing = useSelector(selectIsRefreshing);\n    console.log(\"BalanceForm ==> isRefreshing:\", isRefreshing); //!\n\n\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const form = e.currentTarget;\n        const balance = form.elements.balance.value;\n\n        dispatch(updateBalance({ balance }));\n        toast.success(`Your balance has been successfully updated to ${balance} UAN`);\n        // dispatch(getBalance());\n        form.reset();\n        return;\n    };\n\n\n\n    return (\n        <>\n            <form\n                className={css.Form}\n                onSubmit={handleSubmit}\n            >\n\n                <label\n                    className={css.FormLabel}\n                >\n                    Balance:&nbsp;&nbsp;\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    <br />\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        type=\"text\"\n                        name=\"balance\"\n                        pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                        title=\"Вalance must be whole numbers (or decimal numbers)\"\n                        // required\n                        // value={balance1}\n                        // readonly\n                        defaultValue={balance1}\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n                <br />\n\n\n                <button\n                    className={css.FormBtn}\n                    type=\"submit\"\n                // disabled={isRefreshing}\n                >\n                    CONFIRM\n                    {/* {isRefreshing ? <Spinner size=\"32\">CONFIRM</Spinner> : \"CONFIRM\"} */}\n                </button>\n            </form>\n\n            <ToastContainer autoClose={1500} theme={\"colored\"} />\n        </>\n    );\n}\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"TransactionForm_Form__HDr-h\",\"FormLabel\":\"TransactionForm_FormLabel__33C-l\",\"FormBtn\":\"TransactionForm_FormBtn__kZSQ7\",\"FormInput\":\"TransactionForm_FormInput__IXxud\",\"selectText\":\"TransactionForm_selectText__NeAXk\",\"selectPlaceholder\":\"TransactionForm_selectPlaceholder__ilaY3\"};","// import { useEffect } from 'react';\n// import { useSelector } from 'react-redux';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import { Spinner } from 'components/Spinner/Spinner';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport moment from 'moment';\n\n\n// import { updateBalance } from 'redux/auth/authOperations.js'; //!!!!!\nimport { addTransactionExpenses } from 'redux/transaction/transactionOperations.js'; //!!!!!\n\nimport { selectIsRefreshing, selectBalance } from 'redux/auth/authSelectors';\n// import { selectIsRefreshing } from 'redux/auth/authSelectors';\nimport { useAuth } from 'hooks';\n\n\nimport css from './TransactionForm.module.css';\n\n\n//---------------------------------------------------------------------------------\nexport const TransactionForm = ({ transactionsType }) => {\n    const dispatch = useDispatch();\n\n    //!!!!!\n    // useEffect(() => {\n    //     dispatch(getBalance());\n    // }, [dispatch]);\n\n    //! ========================== console balance & isRefreshing ==========================\n    const { isRefreshing: isRefreshingAuth, user, balance: balanceAuth } = useAuth();\n    const balanceUser = user.balance; //! тормозит\n    console.log(\"TransactionForm ==> balanceUser:\", balanceUser); //!\n    console.log(\"TransactionForm ==> balanceAuth:\", balanceAuth); //!\n    console.log(\"TransactionForm ==> isRefreshingAuth:\", isRefreshingAuth); //!\n\n    const balance1 = useSelector(selectBalance);\n    console.log(\"TransactionForm ==> balance1:\", balance1); //!\n\n    const isRefreshing = useSelector(selectIsRefreshing);\n    console.log(\"TransactionForm ==> isRefreshing:\", isRefreshing); //!\n    //! _________________________ console balance & isRefreshing _________________________\n\n\n    //! currentDate\n    // const currentDate = moment().format(\"DD-MM-YYYY_hh:mm:ss\");\n    const currentDate = moment().format(\"DD-MM-YYYY\");\n    console.log(\"currentDate:\", currentDate);\n\n    //! Submit FORM\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const form = e.currentTarget;\n        // const currentDate = form.elements.currentDate.value;\n        const description = form.elements.description.value;\n        const category = form.elements.category.value;\n        const sum = form.elements.sum.value;\n\n        if (category === \"true\") {\n            toast.warning(`Please choose a product category`);\n            return;\n        }\n        if (!sum) {\n            toast.warning(`Please enter the transaction amount`);\n            return;\n        }\n\n        const expensesTransaction = {\n            transactionsType,\n            date: currentDate,\n            description,\n            category,\n            sum\n        };\n\n        console.log(\"Expenses Transaction:\", expensesTransaction); //!\n\n        dispatch(addTransactionExpenses(expensesTransaction));\n        toast.success(`Your Expenses transaction has been successfully added`);\n        form.reset();\n        return;\n    };\n\n\n\n    return (\n        <>\n            <form\n                className={css.Form}\n                id=\"transactionForm\"\n                onSubmit={handleSubmit}\n            >\n                {/* //! DATE */}\n                <label className={css.FormLabel}>\n                    {/* DATE */}\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    {/* <br /> */}\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        type=\"text\"\n                        name=\"currentDate\"\n                        defaultValue={currentDate}\n                    // placeholder=\"Date\"\n                    // pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                    // title=\"Вalance must be whole numbers (or decimal numbers)\"\n                    // required\n                    // value={balance1}\n                    // readonly\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n                {/* <br /> */}\n\n                {/* //! DESCRIPTION */}\n                <label className={css.FormLabel}>\n                    {/* DESCRIPTION */}\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        type=\"text\"\n                        name=\"description\"\n                        placeholder=\"Product description\"\n                    // pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                    // title=\"Вalance must be whole numbers (or decimal numbers)\"\n                    // required\n                    // readonly\n                    // value={balance1}\n                    // defaultValue={\"Product description\"}\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n\n                {/* //! CATEGORY */}\n                <label className={css.FormLabel}\n                // for=\"productCategory\"\n                >\n                    {/* Choose a Product category: */}\n                </label>\n                {/* <p className={css.selectText}> */}\n                <select className={css.selectText}\n                    id=\"productCategory\"\n                    // value={\"Product category\"}\n                    // defaultValue={\"Product category\"}\n                    name=\"category\"\n                    // placeholder=\"Product category\"\n                    form=\"transactionForm\"\n                // required\n                >\n                    {/* <option value=\"Product category\" disabled>******</option> */}\n                    {/* <option className={css.selectPlaceholder} disabled>Product category</option> */}\n                    <option className={css.selectPlaceholder} value disabled selected>Product category</option>\n                    <option value=\"transport\">Transport</option>\n                    <option value=\"products\">Products</option>\n                    <option value=\"health\">Health</option>\n                    <option value=\"alcohol\">Alcohol</option>\n                    <option value=\"entertainment\">Entertainment</option>\n                    <option value=\"housing\">Housing</option>\n                    <option value=\"technique\">Technique</option>\n                    <option value=\"communal\">Communal, communication</option>\n                    <option value=\"sports\">Sports, hobbies</option>\n                    <option value=\"education\">Education</option>\n                    <option value=\"other\">Other</option>\n                </select>\n                {/* </p> */}\n\n                {/* //! SUM */}\n                <label className={css.FormLabel}>\n                    {/* SUM */}\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    {/* <br /> */}\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        // type=\"text\"\n                        type=\"text\"\n                        name=\"sum\"\n                        placeholder=\"0,00\"\n                        pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                        title=\"Вalance must be whole numbers (or decimal numbers)\"\n                    // focus\n                    // style={{ color: \"red\" }}\n                    // required\n                    // readonly\n                    // value={balance1}\n                    // defaultValue={\"0,00\"}\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n\n                {/* //! Кнопка submit FORM */}\n                <button className={css.FormBtn}\n                    type=\"submit\"\n                // disabled={isRefreshing}\n                >\n                    INPUT\n                    {/* {isRefreshing ? <Spinner size=\"32\">CONFIRM</Spinner> : \"CONFIRM\"} */}\n                </button>\n\n                {/* //! Кнопка очистки FORM */}\n                <input className={css.FormBtn}\n                    type=\"reset\"\n                    value=\"CLEAR\"\n                    form=\"transactionForm\"\n                // onChange={handleClearSubmit}\n                />\n            </form>\n\n            <ToastContainer autoClose={1500} theme={\"colored\"} />\n        </>\n    );\n}\n\n\n\n\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nimport { getBalance } from 'redux/auth/authOperations';\nimport { selectIsRefreshing, selectBalance } from 'redux/auth/authSelectors';\n// import { useAuth } from 'hooks';\n\n\n\nimport { Container } from 'components/Container/Container';\nimport { BalanceForm } from 'components/BalanceForm/BalanceForm.js';\nimport { TransactionForm } from 'components/TransactionForm/TransactionForm.js';\n\n\n//-----------------------------------------------------------------------------------\nexport default function ExpensesPage() {\n  const dispatch = useDispatch();\n\n  //! Тип траззакции \"expenses\"\n  const transactionsType = \"expenses\"\n\n  useEffect(() => {\n    dispatch(getBalance());\n  }, [dispatch]);\n\n\n  const balance = useSelector(selectBalance);\n  console.log(\"ExpensesPage ==> balance:\", balance); //!\n\n  const isRefreshing = useSelector(selectIsRefreshing);\n  console.log(\"ExpensesPage ==> isRefreshing:\", isRefreshing); //!\n\n\n  return (\n    <Container>\n      <h2>Balance: {balance}</h2>\n      <BalanceForm />\n      <br />\n      <br />\n\n      <h2>Expenses Transactions</h2>\n      <TransactionForm transactionsType={transactionsType} />\n\n    </Container>\n  );\n}\n"],"names":["Container","children","className","css","BalanceForm","dispatch","useDispatch","useAuth","isRefreshingAuth","isRefreshing","user","balanceAuth","balance","balanceUser","console","log","balance1","useSelector","selectBalance","selectIsRefreshing","onSubmit","e","preventDefault","form","currentTarget","elements","value","updateBalance","toast","reset","type","name","pattern","title","defaultValue","autoClose","theme","TransactionForm","transactionsType","currentDate","moment","format","id","description","category","sum","expensesTransaction","date","addTransactionExpenses","placeholder","disabled","selected","ExpensesPage","useEffect","getBalance"],"sourceRoot":""}