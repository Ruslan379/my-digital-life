{"version":3,"file":"static/js/8.16ab8e6c.chunk.js","mappings":"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","sources":["webpack://my-digital-life/./src/components/ModalNullBalance/ModalNullBalance.module.css?9e78","components/ModalNullBalance/ModalNullBalance.jsx","webpack://my-digital-life/./src/components/ModalNullBalanceWindow/ModalNullBalanceWindow.module.css?5a07","components/ModalNullBalanceWindow/ModalNullBalanceWindow.js","webpack://my-digital-life/./src/components/BalanceForm/BalanceForm.module.css?dae1","components/BalanceForm/BalanceForm.js","webpack://my-digital-life/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","components/Loader/Loader.jsx","components/Spinner/Spinner.js","webpack://my-digital-life/./src/components/TransactionForm/TransactionForm.module.css?2486","components/TransactionForm/TransactionForm.js","webpack://my-digital-life/./src/components/ModalTransactionLDelete/ModalTransactionLDelete.module.css?35b6","components/ModalTransactionLDelete/ModalTransactionLDelete.jsx","webpack://my-digital-life/./src/components/ModalTransactionLDeleteWindow/ModalTransactionLDeleteWindow.module.css?5753","components/ModalTransactionLDeleteWindow/ModalTransactionLDeleteWindow.js","webpack://my-digital-life/./src/components/TransactionListItem/TransactionListItem.module.css?61d9","components/TransactionListItem/TransactionListItem.js","webpack://my-digital-life/./src/components/TransactionList/TransactionList.module.css?a859","components/TransactionList/TransactionList.js","redux/transaction/transactionSelectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"ModalNullBalance_Overlay__MY3ZA\",\"Modal\":\"ModalNullBalance_Modal__Ow1Wp\"};","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport css from 'components/ModalNullBalance/ModalNullBalance.module.css' \n\n\n\n\nconst modalRoot = document.querySelector('#modal-root');\n\n\nexport function ModalNullBalance({ children, onClose }) {\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        onClose();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]); \n\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n\n\n    return createPortal(\n      <div\n        className={css.Overlay1}\n        onClick={handleBackdropClick}\n      >\n          <div className={css.Modal}>\n          {children}\n          </div>\n      </div>,\n      modalRoot,\n    );\n  }\n\n\nModalNullBalance.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"FormEdit\":\"ModalNullBalanceWindow_FormEdit__kofm7\",\"FormLabelEdit\":\"ModalNullBalanceWindow_FormLabelEdit__DzT6a\",\"FormBtnEdit\":\"ModalNullBalanceWindow_FormBtnEdit__V+FuQ\",\"FormInputEdit\":\"ModalNullBalanceWindow_FormInputEdit__5qJ-M\"};","\nimport css from './ModalNullBalanceWindow.module.css';\n\n\n// export const ModalNullBalanceWindow = ({ toggleModal }) => {\nexport const ModalNullBalanceWindow = () => {\n\n    return (\n        <div className={css.FormEdit}>\n            Hello! To get started, enter the current balance of your account!\n        </div>\n    );\n}\n\n// ModalNullBalanceWindow.propTypes = {\n//     toggleModal: PropTypes.func.isRequired,\n// };\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"BalanceForm_Form__sTjkN\",\"FormLabel\":\"BalanceForm_FormLabel__D+IkA\",\"FormBtn\":\"BalanceForm_FormBtn__7m8A3\",\"FormInput\":\"BalanceForm_FormInput__bqPQk\",\"btnConfirmActive\":\"BalanceForm_btnConfirmActive__b9hJv\",\"btnConfirmDisabled\":\"BalanceForm_btnConfirmDisabled__+QPff\"};","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { changeIsNotNewUser, getBalanceIsNotNewUser, updateBalance } from 'redux/auth/authOperations.js';\n// import { changeIsNotNewUser, refreshUser, updateBalance } from 'redux/auth/authOperations.js'; //! зацикливается\nimport { selectIsRefreshing, selectBalance, selecIsNotNewUser } from 'redux/auth/authSelectors';\n// import { selectIsRefreshing } from 'redux/auth/authSelectors';\n// import { useAuth } from 'hooks';\n\n// import { Spinner } from 'components/Spinner/Spinner';\n\n//! Модальное окно\nimport { ModalNullBalance } from 'components/ModalNullBalance/ModalNullBalance.jsx';\n// import { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { ModalNullBalanceWindow } from 'components/ModalNullBalanceWindow/ModalNullBalanceWindow.js';\n\nimport css from './BalanceForm.module.css';\n\n\n\nexport const BalanceForm = ({ balance }) => {\n    console.log(\"BalanceForm ==> ({BALANCE}):\", balance); //!\n    const dispatch = useDispatch();\n\n    //! Модальное окно\n    const [showModal, setShowModal] = useState(false);\n    // const [newBalance, setNewBalance] = useState(0); //?...!\n    const toggleModal = () => {\n        setShowModal(!showModal);\n    };\n\n    useEffect(() => {\n        dispatch(getBalanceIsNotNewUser());\n        // dispatch(refreshUser()); //! зацикливается\n        // }, [dispatch]);\n    });\n\n\n    // const { isRefreshing: isRefreshingAuth, user, balance: balanceAuth } = useAuth();\n    // const balanceUser = user.balance; //! тормозит\n    // console.log(\"BalanceForm ==> balanceUser:\", balanceUser); //!\n    // console.log(\"BalanceForm ==> balanceAuth:\", balanceAuth); //!\n    // console.log(\"BalanceForm ==> isRefreshingAuth:\", isRefreshingAuth); //!\n\n    const balanceNew = useSelector(selectBalance);\n    console.log(\"BalanceForm ==> balanceNew:\", balanceNew); //!\n    console.log(\"BalanceForm ==> typeof balanceNew:\", (typeof Number(balanceNew))); //!\n\n\n    const isRefreshing = useSelector(selectIsRefreshing);\n    console.log(\"BalanceForm ==> isRefreshing:\", isRefreshing); //!\n\n    const NotNewUser = useSelector(selecIsNotNewUser);\n    console.log(\"BalanceForm ==> isNotNewUser:\", NotNewUser); //!\n\n\n\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const form = e.currentTarget;\n        const balance = form.elements.balance.value;\n\n        const isNotNewUser = true\n        //! ИЗМЕНИТЬ статус  пользователя --> user.isNotNewUser: false (если balanceNew === 0)\n        if (!balanceNew && !NotNewUser) {\n            // dispatch(changeIsNotNewUser(\"isNewUser\"))\n            dispatch(changeIsNotNewUser({ isNotNewUser }))\n        };\n        //! ИЗМЕНИТЬ баланс пользователя\n        dispatch(updateBalance({ balance }));\n        toast.success(`Your balance has been successfully updated to ${balance} UAN`);\n        form.reset();\n        return;\n    };\n\n\n\n    return (\n        <>\n            <form\n                className={css.Form}\n                onSubmit={handleSubmit}\n            >\n                <label\n                    className={css.FormLabel}\n                >\n                    Balance:&nbsp;&nbsp;&nbsp;\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        type=\"text\"\n                        name=\"balance\"\n                        pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                        title=\"Вalance must be whole numbers (or decimal numbers)\"\n                        disabled={NotNewUser} //! пока не блокировать\n                        // required\n                        // value={balanceNew}\n                        // readonly\n                        // defaultValue={balanceNew} //! тормозит\n                        placeholder={balanceNew}\n                    // defaultValue={(balanceNew) ? balanceNew : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n\n\n                <button\n                    className={css.FormBtn}\n                    type=\"submit\"\n                    disabled={NotNewUser} //! пока не блокировать\n                >\n                    {/* CONFIRM */}\n                    {\n                        NotNewUser\n                            ?\n                            <span className={css.btnConfirmDisabled}>\n                                NO CONFIRM\n                            </span>\n                            :\n                            <span className={css.btnConfirmActive}>\n                                CONFIRM\n                            </span>\n                    }\n                    {/* {isRefreshing ? <Spinner size=\"32\">CONFIRM</Spinner> : \"CONFIRM\"} */}\n                </button>\n\n            </form>\n\n            {/* //! Модальное окно */}\n            {!balanceNew && !NotNewUser && (\n                <ModalNullBalance onClose={toggleModal}>\n                    <ModalNullBalanceWindow />\n                </ModalNullBalance>\n            )}\n\n            <ToastContainer autoClose={1500} theme={\"colored\"} />\n        </>\n    );\n}\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"Container\":\"Container_Container__dPyVg\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport css from 'components/Container/Container.module.css' \n\n\nexport const Container = ({ children }) =>\n    <div className={css.Container}>\n        {children}\n    </div>;\n\n\nContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\n\n","import React from 'react';\n\nimport { Audio } from  'react-loader-spinner'\n\n\n\nexport const Loader = () => (\n  <h1 style={{ margin: '0 auto' }}>\n    Please wait...\n      <Audio width = \"100%\" />\n  </h1>\n);\n\n\n\n// export default Loader;\n","import styled from '@emotion/styled/macro';\nimport { keyframes } from '@emotion/react';\nimport { CgSpinner } from 'react-icons/cg';\n\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n\n100% {\n  transform: rotate(1turn);\n}\n`;\n\nexport const Spinner = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`;\n\nSpinner.defaultProps = {\n  size: 40,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Form\":\"TransactionForm_Form__HDr-h\",\"FormLabel\":\"TransactionForm_FormLabel__33C-l\",\"FormBtn\":\"TransactionForm_FormBtn__kZSQ7\",\"FormInput\":\"TransactionForm_FormInput__IXxud\",\"FormInputSum\":\"TransactionForm_FormInputSum__RcDsc\",\"selectText\":\"TransactionForm_selectText__NeAXk\",\"selectPlaceholder\":\"TransactionForm_selectPlaceholder__ilaY3\"};","// import { useEffect } from 'react';\n// import { useSelector } from 'react-redux';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import { Spinner } from 'components/Spinner/Spinner';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport moment from 'moment';\n\n\n// import { updateBalance } from 'redux/auth/authOperations.js'; //!!!!!\nimport { getBalanceIsNotNewUser } from 'redux/auth/authOperations';\nimport { addTransaction } from 'redux/transaction/transactionOperations.js'; //!!!!!\n\nimport { selectIsRefreshing, selectBalance } from 'redux/auth/authSelectors';\n// import { selectIsRefreshing } from 'redux/auth/authSelectors';\nimport { useAuth } from 'hooks';\n\n\nimport css from './TransactionForm.module.css';\n\n\n//---------------------------------------------------------------------------------\nexport const TransactionForm = ({ balance, transactionsType }) => {\n    const dispatch = useDispatch();\n\n    //!!!!!\n    // useEffect(() => {\n    //     dispatch(getBalanceIsNotNewUser());\n    // }, [dispatch]);\n\n    //! ========================== console balance & isRefreshing ==========================\n    const { isRefreshing: isRefreshingAuth, user, balance: balanceAuth } = useAuth();\n    const balanceUser = user.balance; //! тормозит\n    console.log(\"TransactionForm ==> balanceUser:\", balanceUser); //!\n    console.log(\"TransactionForm ==> balanceAuth:\", balanceAuth); //!\n    console.log(\"TransactionForm ==> isRefreshingAuth:\", isRefreshingAuth); //!\n\n    const balance1 = useSelector(selectBalance);\n    console.log(\"TransactionForm ==> balance1:\", balance1); //!\n\n    const isRefreshing = useSelector(selectIsRefreshing);\n    console.log(\"TransactionForm ==> isRefreshing:\", isRefreshing); //!\n    //! _________________________ console balance & isRefreshing _________________________\n\n\n    //! currentDate\n    // const currentDate = moment().format(\"DD-MM-YYYY_hh:mm:ss\");\n    const currentDate = moment().format(\"DD-MM-YYYY\");\n    console.log(\"currentDate:\", currentDate);\n\n    //! Submit FORM\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const form = e.currentTarget;\n        // const currentDate = form.elements.currentDate.value;\n        const description = form.elements.description.value;\n        const category = form.elements.category.value;\n        const sum = form.elements.sum.value;\n\n        if (!description) {\n            toast.warning(`Please enter a product description`);\n            return;\n        }\n        if (category === \"true\") {\n            toast.warning(`Please choose a product category`);\n            return;\n        }\n        if (!sum) {\n            toast.warning(`Please enter the transaction amount`);\n            return;\n        }\n        if ((balance - sum) < 0) {\n            toast.error(`Transaction NOT ALLOWED!!!\\n Your expenses exceed your balance`);\n            return;\n        }\n\n        const expensesTransaction = {\n            transactionsType,\n            date: currentDate,\n            description,\n            category,\n            sum\n        };\n\n        console.log(\"Expenses Transaction:\", expensesTransaction); //!\n\n        dispatch(addTransaction(expensesTransaction));\n\n        if (transactionsType === \"expenses\") {\n            toast.info(`Your Expenses transaction has been successfully added`);\n        }\n        if (transactionsType === \"income\") {\n            toast.success(`Your Income transaction has been successfully added`);\n        }\n        form.reset();\n        dispatch(getBalanceIsNotNewUser());\n        return;\n    };\n\n\n\n    return (\n        <>\n            <form\n                className={css.Form}\n                id=\"transactionForm\"\n                onSubmit={handleSubmit}\n            >\n                {/* //! DATE */}\n                <label className={css.FormLabel}>\n                    {/* DATE */}\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    {/* <br /> */}\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        type=\"text\"\n                        name=\"currentDate\"\n                        defaultValue={currentDate}\n                    // placeholder=\"Date\"\n                    // pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                    // title=\"Вalance must be whole numbers (or decimal numbers)\"\n                    // required\n                    // value={balance1}\n                    // readonly\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n                {/* <br /> */}\n\n                {/* //! DESCRIPTION */}\n                <label className={css.FormLabel}>\n                    {/* DESCRIPTION */}\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    <input\n                        className={css.FormInput}\n                        // id=\"inputName\"\n                        type=\"text\"\n                        name=\"description\"\n                        placeholder=\"Product description\"\n                    // pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                    // title=\"Вalance must be whole numbers (or decimal numbers)\"\n                    // required\n                    // readonly\n                    // value={balance1}\n                    // defaultValue={\"Product description\"}\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    />\n                </label>\n\n                {/* //! CATEGORY */}\n                <label className={css.FormLabel}\n                // for=\"productCategory\"\n                >\n                    {/* Choose a Product category: */}\n                </label>\n                {/* <p className={css.selectText}> */}\n                <select className={css.selectText}\n                    id=\"productCategory\"\n                    // value={\"Product category\"}\n                    // defaultValue={\"Product category\"}\n                    name=\"category\"\n                    // placeholder=\"Product category\"\n                    form=\"transactionForm\"\n                // required\n                >\n                    {/* <option value=\"Product category\" disabled>******</option> */}\n                    {/* <option className={css.selectPlaceholder} disabled>Product category</option> */}\n                    <option className={css.selectPlaceholder} value disabled selected>Product category</option>\n                    <option value=\"Transport\" disabled={transactionsType === \"income\"}>Transport</option>\n                    <option value=\"Products\" disabled={transactionsType === \"income\"}>Products</option>\n                    <option value=\"Health\" disabled={transactionsType === \"income\"}>Health</option>\n                    <option value=\"Alcohol\" disabled={transactionsType === \"income\"}>Alcohol</option>\n                    <option value=\"Entertainment\" disabled={transactionsType === \"income\"}>Entertainment</option>\n                    <option value=\"Housing\" disabled={transactionsType === \"income\"}>Housing</option>\n                    <option value=\"Technique\" disabled={transactionsType === \"income\"}>Technique</option>\n                    <option value=\"Communal, communication\" disabled={transactionsType === \"income\"}>Communal, communication</option>\n                    <option value=\"Sports, hobbies\" disabled={transactionsType === \"income\"}>Sports, hobbies</option>\n                    <option value=\"Education\" disabled={transactionsType === \"income\"}>Education</option>\n                    <option value=\"Other\" disabled={transactionsType === \"income\"}>Other</option>\n                    <option value=\"Salary\" disabled={transactionsType === \"expenses\"}>Salary</option>\n                    <option value=\"Add.Income\" disabled={transactionsType === \"expenses\"}>Add.Income</option>\n                </select>\n                {/* </p> */}\n\n                {/* //! SUM */}\n                <label className={css.FormLabel}>\n                    {/* SUM */}\n                    {/* {isRefreshing ? \"Please wait...\" : \"Balance\"} */}\n                    <input\n                        className={css.FormInputSum}\n                        // id=\"inputName\"\n                        // type=\"text\"\n                        type=\"text\"\n                        name=\"sum\"\n                        placeholder=\"0,00\"\n                        pattern=\"^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$\"\n                        title=\"Вalance must be whole numbers (or decimal numbers)\"\n                    // focus\n                    // style={{ color: \"red\" }}\n                    // required\n                    // readonly\n                    // value={balance1}\n                    // defaultValue={\"0,00\"}\n                    // defaultValue={(balance1) ? balance1 : balanceAuth}\n                    // onChange={handleSubmit}\n                    // text-align=\"center\"\n                    />\n                </label>\n\n                {/* //! Кнопка submit FORM */}\n                <button className={css.FormBtn}\n                    type=\"submit\"\n                // disabled={isRefreshing}\n                >\n                    INPUT\n                    {/* {isRefreshing ? <Spinner size=\"32\">CONFIRM</Spinner> : \"CONFIRM\"} */}\n                </button>\n\n                {/* //! Кнопка очистки FORM */}\n                <input className={css.FormBtn}\n                    type=\"reset\"\n                    value=\"CLEAR\"\n                    form=\"transactionForm\"\n                // onChange={handleClearSubmit}\n                />\n            </form>\n\n            <ToastContainer autoClose={1500} theme={\"colored\"} />\n        </>\n    );\n}\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"ModalTransactionLDelete_Overlay__2H6-n\",\"Modal\":\"ModalTransactionLDelete_Modal__-XWSS\"};","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport css from 'components/ModalTransactionLDelete/ModalTransactionLDelete.module.css' \n\n\n\n\nconst modalRoot = document.querySelector('#modal-root');\n\n\nexport function ModalTransactionLDelete({ children, onClose }) {\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        onClose();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]); \n\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      onClose();\n    }\n  };\n\n\n\n    return createPortal(\n      <div\n        className={css.Overlay1}\n        onClick={handleBackdropClick}\n      >\n          <div className={css.Modal}>\n          {children}\n          </div>\n      </div>,\n      modalRoot,\n    );\n  }\n\n\nModalTransactionLDelete.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"modalWindow\":\"ModalTransactionLDeleteWindow_modalWindow__pZbt3\",\"modalTitle\":\"ModalTransactionLDeleteWindow_modalTitle__KTziP\",\"modalBtnYes\":\"ModalTransactionLDeleteWindow_modalBtnYes__seQMO\",\"modalBtnNo\":\"ModalTransactionLDeleteWindow_modalBtnNo__5+gwW\"};","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { deleteTransaction } from 'redux/transaction/transactionOperations.js';\nimport { selectLoadingTransactions } from 'redux/transaction/transactionSelectors.js';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nimport css from './ModalTransactionLDeleteWindow.module.css';\n\n//------------------------------------------------------------------------------------------------------------------\nexport const ModalTransactionLDeleteWindow = ({ id, toggleModal }) => {\n    const dispatch = useDispatch();\n\n    const isLoading = useSelector(selectLoadingTransactions);\n    console.log(\"ModalTransactionLDeleteWindow ==> isLoading:\", isLoading); //!\n\n    const handleDelete = () => {\n        dispatch(deleteTransaction(id)); //!!!!!\n        toggleModal();\n    };\n\n\n\n\n    return (\n        <>\n            {isLoading && <Spinner />}\n\n            <div className={css.modalWindow}>\n\n                <p className={css.modalTitle}>Are you sure?</p>\n\n                <button className={css.modalBtnYes}\n                    type='button'\n                    onClick={handleDelete}\n                >\n                    YES\n                </button>\n\n                <button\n                    className={css.modalBtnNo}\n                    type='button'\n                    onClick={toggleModal}\n                >\n                    NO\n                </button>\n            </div>\n        </>\n    );\n}\n\nModalTransactionLDeleteWindow.propTypes = {\n    id: PropTypes.string.isRequired,\n    toggleModal: PropTypes.func.isRequired,\n};\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"TransactionListItem\":\"TransactionListItem_TransactionListItem__7P-i+\",\"TransactionListItemText\":\"TransactionListItem_TransactionListItemText__pk84L\",\"TransactionListItemTextSumExpenses\":\"TransactionListItem_TransactionListItemTextSumExpenses__shLQA\",\"TransactionListItemTextSumIncome\":\"TransactionListItem_TransactionListItemTextSumIncome__2F-2F\",\"ContactListNumber\":\"TransactionListItem_ContactListNumber__N4lzJ\",\"ContactListEditBtn\":\"TransactionListItem_ContactListEditBtn__GAH78\",\"ContactListDeleteBtn\":\"TransactionListItem_ContactListDeleteBtn__6pp5k\"};","import { useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n\n// import { deleteTransaction } from 'redux/transaction/transactionOperations.js'; //!!!!!\nimport { selectLoadingTransactions } from 'redux/transaction/transactionSelectors.js';\n\n// import { Spinner } from 'components/Spinner/Spinner';\n\n\n//! Модальное окно\nimport { ModalTransactionLDelete } from 'components/ModalTransactionLDelete/ModalTransactionLDelete.jsx';\n// import { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { ModalTransactionLDeleteWindow } from 'components/ModalTransactionLDeleteWindow/ModalTransactionLDeleteWindow.js';\n\nimport css from './TransactionListItem.module.css';\n\n\n\nexport const TransactionListItem = ({ id, date, transactionsType, description, category, sum }) => {\n    // const dispatch = useDispatch(); //!!!!!\n\n    //! Модальное окно\n    const [showModal, setShowModal] = useState(false);\n    const toggleModal = () => {\n        setShowModal(!showModal);\n    }\n\n\n    const isLoading = useSelector(selectLoadingTransactions);\n    console.log(\"ContactListItem==>isLoading:\", isLoading); //!\n\n\n    const handleDeleteQuestion = () => {\n        toggleModal();\n        // dispatch(deleteTransaction(id)); //!!!!!\n    };\n\n\n\n\n    return (\n        <>\n            <li className={css.TransactionListItem}>\n                <p className={css.TransactionListItemText}>\n                    {date}\n                </p>\n                <p className={css.TransactionListItemText}>\n                    {description}\n                </p>\n                <p className={css.TransactionListItemText}>\n                    {category}\n                </p>\n                <p\n                    // className={css.TransactionListItemTextSum} \n                    className={\n                        (transactionsType === \"expenses\")\n                            ?\n                            css.TransactionListItemTextSumExpenses\n                            :\n                            css.TransactionListItemTextSumIncome\n                    }\n                >\n                    {/* {-sum} */}\n                    {(transactionsType === \"expenses\") ? - sum : sum}\n                </p>\n\n                <button\n                    type=\"button\"\n                    className={css.ContactListDeleteBtn}\n                    onClick={handleDeleteQuestion}\n                    // onClick={() => deleteContact(id)}\n                    disabled={isLoading}\n                >\n                    Delete\n                    {/* {isLoading ? [<Spinner size=\"18\" />, \" Deleting...\"] : \"Delete\"} */}\n                </button>\n            </li>\n\n            {/* //! Модальное окно */}\n            {showModal && (\n                <ModalTransactionLDelete onClose={toggleModal}>\n                    <ModalTransactionLDeleteWindow\n                        id={id}\n                        toggleModal={toggleModal}\n                    />\n                </ModalTransactionLDelete>\n            )}\n        </>\n    );\n};\n\nTransactionListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    transactionsType: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n    sum: PropTypes.number.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"ContactList\":\"TransactionList_ContactList__6JVJP\",\"TransactionListHeader\":\"TransactionList_TransactionListHeader__lXBuk\",\"TransactionListText\":\"TransactionList_TransactionListText__PdA0x\"};","// import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { TransactionListItem } from '../TransactionListItem/TransactionListItem.js';\n\n\nimport css from './TransactionList.module.css';\n\n\n\nexport const TransactionList = ({ transactions, transactionsType }) => {\n    const transactionsExpenses = transactions.filter(transaction => transaction.transactionsType === \"expenses\");\n    console.log(\"TransactionList ==> transactionsExpenses:\", transactionsExpenses); //!\n\n    const transactionsIncome = transactions.filter(transaction => transaction.transactionsType === \"income\");\n    console.log(\"TransactionList ==> transactionsIncome:\", transactionsIncome); //!\n\n    let selectionByTransactionType = []\n    if (transactionsType === \"expenses\") {\n        selectionByTransactionType = transactionsExpenses\n    }\n    if (transactionsType === \"income\") {\n        selectionByTransactionType = transactionsIncome\n    }\n\n    return (\n        <>\n            <div className={css.TransactionListHeader}>\n                <p className={css.TransactionListText}>\n                    Date\n                </p>\n                <p className={css.TransactionListText}>\n                    Description\n                </p>\n                <p className={css.TransactionListText}>\n                    Category\n                </p>\n                <p className={css.TransactionListText}>\n                    Sum\n                </p>\n                <p className={css.TransactionListText}>\n\n                </p>\n            </div>\n\n            <ul className={css.ContactList}>\n                {selectionByTransactionType.map(({ _id, transactionsType, date, description, category, sum }) => (\n                    <TransactionListItem\n                        key={_id}\n                        id={_id}\n                        transactionsType={transactionsType}\n                        date={date}\n                        description={description}\n                        category={category}\n                        sum={sum}\n                    />\n                ))}\n            </ul>\n        </>\n    );\n};\n\n\nTransactionList.propTypes = {\n    transactions: PropTypes.array.isRequired,\n};","export const selectLoadingTransactions = state => state.transactions.isLoading;\n\nexport const selectAllTransactions = state => state.transactions.allTransactions;\n\n"],"names":["modalRoot","document","querySelector","ModalNullBalance","children","onClose","useEffect","handleKeyDown","event","code","window","addEventListener","removeEventListener","createPortal","className","css","onClick","currentTarget","target","ModalNullBalanceWindow","BalanceForm","balance","console","log","dispatch","useDispatch","useState","showModal","setShowModal","getBalanceIsNotNewUser","balanceNew","useSelector","selectBalance","Number","isRefreshing","selectIsRefreshing","NotNewUser","selecIsNotNewUser","onSubmit","e","preventDefault","form","elements","value","changeIsNotNewUser","isNotNewUser","updateBalance","toast","reset","type","name","pattern","title","disabled","placeholder","autoClose","theme","Container","Loader","style","margin","width","spin","keyframes","Spinner","CgSpinner","defaultProps","size","TransactionForm","transactionsType","useAuth","isRefreshingAuth","user","balanceAuth","balanceUser","balance1","currentDate","moment","format","id","description","category","sum","expensesTransaction","date","addTransaction","defaultValue","selected","ModalTransactionLDelete","ModalTransactionLDeleteWindow","toggleModal","isLoading","selectLoadingTransactions","deleteTransaction","TransactionListItem","TransactionList","transactions","transactionsExpenses","filter","transaction","transactionsIncome","selectionByTransactionType","map","_id","state","selectAllTransactions","allTransactions"],"sourceRoot":""}